<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Codethug</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codethug.com/"/>
  <updated>2021-03-17T18:55:59.617Z</updated>
  <id>http://codethug.com/</id>
  
  <author>
    <name>Tim Larson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Caching with Attributes in .Net Core 5</title>
    <link href="http://codethug.com/2021/03/17/Caching-with-Attributes-in-DotNet-Core5/"/>
    <id>http://codethug.com/2021/03/17/Caching-with-Attributes-in-DotNet-Core5/</id>
    <published>2021-03-17T18:22:57.000Z</published>
    <updated>2021-03-17T18:55:59.617Z</updated>
    
    <content type="html"><![CDATA[<p>You had a performance problem, and you solved it by implementing caching:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = PersonRepository.GetByLastName(personId);</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonRepository</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> secondsToCacheResult = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Person&gt;&gt; GetByLastName(<span class="keyword">string</span> lastName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> cacheKey = buildCacheKey(lastName);</span><br><span class="line">        <span class="keyword">if</span> (_cache.ContainsKey(cacheKey)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _cache[cacheKey] <span class="keyword">as</span> Person;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This part takes a long time, that's why we </span></span><br><span class="line">        <span class="comment">// want to cache the results</span></span><br><span class="line">        <span class="keyword">var</span> people = SomeLongRunningProcess(lastName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> options = <span class="keyword">new</span> MemoryCacheEntryOptions</span><br><span class="line">        &#123;</span><br><span class="line">            AbsoluteExpirationRelativeToNow = <span class="keyword">new</span> System.TimeSpan(</span><br><span class="line">                hours: <span class="number">0</span>, minutes: <span class="number">0</span>, seconds: secondsToCacheResult)</span><br><span class="line">        &#125;;</span><br><span class="line">        _cache.Add(cacheKey, people, options)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And it worked!  The performance problem is solved.  But then you start caching things in several places in your repositories, and you end up with this exact same caching code everywhere.  Not only are you violating the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY principle</a>, but it makes it much harder to understand what’s really going on in the repository method.</p><p>This new problem can be solved by using Aspect Oriented Programming in a Dependency Injection framework by using interception with attributes to make your code look like this instead:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Cache(Seconds = 30)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Person&gt;&gt; GetPeopleByLastName(<span class="keyword">string</span> lastName)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> SomeLongRunningProcess(lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could use DI to <a href="https://www.palmmedia.de/Blog/2010/9/26/aop-interception-with-unity-20" target="_blank" rel="noopener">solve this with Microsoft’s Unity DI</a>, or <a href="https://medium.com/@mohsen_rajabi/asp-core-automating-cache-with-aspect-programing-autofac-dynamic-proxy-8e6b84df44e4" target="_blank" rel="noopener">with AutoFac</a>.  Or we could <a href="https://doc.postsharp.net/caching-getting-started" target="_blank" rel="noopener">use PostSharp</a>, which ‘weaves’ the IL of your code with the code for caching at compile time.  But I wanted to get this working with Microsoft’s DI framework that comes with .Net Core 5.</p><p>But there’s a problem - Microsoft’s DI doesn’t natively support interceptors, so we have to bring in some extra help.  In this case, we’re going to use the Castle Project’s DynamicProxy library.  </p><a id="more"></a><p>In order to be able to add the attribute as seen above and have the caching magically happen, we need to setup 4 things:</p><ol><li><code>CacheAttribute</code> - This defines which method should have its results cached and how the results should be cached.</li><li><code>CacheInterceptor</code> - This is like pipeline middleware, but for calling a method.  This gets injected between the method and the code calling the method, and it decides whether to return a value found in the cache, or whether to let the method run and generate the return value (which is then added to the cache).</li><li><code>ServiceExtensions</code> - An extension method to help us register the class in our DI container so that the CacheInterceptor is used.</li><li><code>Startup.cs</code> - We have to add a few lines to wire everything up</li></ol><h3 id="CacheAttribute"><a href="#CacheAttribute" class="headerlink" title="CacheAttribute"></a>CacheAttribute</h3><p>First, add an attribute class.  This attribute is used to identify methods that we want to cache.  Customize this to add whatever cache settings might be useful in your scenario, such as if you want to use a sliding window, etc.  I’m keeping this simple, so all we have is a timeout with a default value of 30 seconds.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DotNetCore5.Common.Interception</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AttributeUsage(AttributeTargets.Method, AllowMultiple = false)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CacheAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Seconds &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h3><p>Second, we add the interceptor.  This is similar to middleware, because it lets us add logic between a method and a line of code that calls that method.  I’m using MemoryCache, which is automatically set up and injected by Microsoft’s DI, but you can use whatever other mechanism you need for caching the results.</p><p>This requires the <a href="https://www.nuget.org/packages/Castle.Core/" target="_blank" rel="noopener">Castle.Core Nuget package</a>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Castle.DynamicProxy;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Caching.Memory;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DotNetCore5.Common.Interception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CacheInterceptor</span> : <span class="title">IInterceptor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IMemoryCache _memoryCache;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CacheInterceptor</span>(<span class="params">IMemoryCache memoryCache</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _memoryCache = memoryCache;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a cache key using the name of the method and the values</span></span><br><span class="line">        <span class="comment">// of its arguments so that if the same method is called with the</span></span><br><span class="line">        <span class="comment">// same arguments in the future, we can find out if the results </span></span><br><span class="line">        <span class="comment">// are cached or not</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GenerateCacheKey</span>(<span class="params"><span class="keyword">string</span> name, </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">object</span>[] arguments</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arguments == <span class="literal">null</span> || arguments.Length == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">"--"</span> + </span><br><span class="line">                <span class="keyword">string</span>.Join(<span class="string">"--"</span>, arguments.Select(a =&gt; </span><br><span class="line">                    a == <span class="literal">null</span> ? <span class="string">"**NULL**"</span> : a.ToString()).ToArray());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> cacheAttribute = invocation.MethodInvocationTarget</span><br><span class="line">                .GetCustomAttributes(<span class="keyword">typeof</span>(CacheAttribute), <span class="literal">false</span>)</span><br><span class="line">                .FirstOrDefault() <span class="keyword">as</span> CacheAttribute;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the cache attribute is added ot this method, we </span></span><br><span class="line">            <span class="comment">// need to intercept this call</span></span><br><span class="line">            <span class="keyword">if</span> (cacheAttribute != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> cacheKey = GenerateCacheKey(invocation.Method.Name, </span><br><span class="line">                    invocation.Arguments);</span><br><span class="line">                <span class="keyword">if</span> (_memoryCache.TryGetValue(cacheKey, <span class="keyword">out</span> <span class="keyword">object</span> <span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// The results were already in the cache so return </span></span><br><span class="line">                    <span class="comment">// them from the cache instead of calling the </span></span><br><span class="line">                    <span class="comment">// underlying method</span></span><br><span class="line">                    invocation.ReturnValue = <span class="keyword">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Get the result the hard way by calling </span></span><br><span class="line">                    <span class="comment">// the underlying method</span></span><br><span class="line">                    invocation.Proceed();</span><br><span class="line">                    <span class="comment">// Save the result in the cache</span></span><br><span class="line">                    <span class="keyword">var</span> options = <span class="keyword">new</span> MemoryCacheEntryOptions</span><br><span class="line">                    &#123;</span><br><span class="line">                        AbsoluteExpirationRelativeToNow = </span><br><span class="line">                            <span class="keyword">new</span> System.TimeSpan(hours: <span class="number">0</span>, minutes: <span class="number">0</span>, </span><br><span class="line">                                seconds: cacheAttribute.Seconds)</span><br><span class="line">                    &#125;;</span><br><span class="line">                    _memoryCache.Set(cacheKey, invocation.ReturnValue, </span><br><span class="line">                        options);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// We don't need to cache the results, </span></span><br><span class="line">                <span class="comment">// nothing to see here</span></span><br><span class="line">                invocation.Proceed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-Extensions"><a href="#Service-Extensions" class="headerlink" title="Service Extensions"></a>Service Extensions</h3><p>Third, we’ll add an extension method to make it easier to use the CacheInterceptor when registering services.  You may need to add other similar extension methods depending on how you like to use DI.</p><p>Please note that in order for this entire idea to work, the class that has methods to cache must implement an interface, that that interface is what gets injected into the other class that uses it.  That is, if you want to cache the results of a method on <code>MyRepository</code>, then <code>MyRepository</code> must implement <code>IMyRepository</code> and <code>IMyRepository</code> must be injected into <code>MyController</code>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServicesExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> AddProxiedScoped&lt;TInterface, TImplementation&gt;</span><br><span class="line">        (<span class="keyword">this</span> IServiceCollection services)</span><br><span class="line">        <span class="keyword">where</span> TInterface : <span class="keyword">class</span></span><br><span class="line">        <span class="title">where</span> <span class="title">TImplementation</span> : <span class="title">class</span>, <span class="title">TInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// This registers the underlying class</span></span><br><span class="line">        services.AddScoped&lt;TImplementation&gt;();</span><br><span class="line">        services.AddScoped(<span class="keyword">typeof</span>(TInterface), serviceProvider =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Get an instance of the Castle Proxy Generator</span></span><br><span class="line">            <span class="keyword">var</span> proxyGenerator = serviceProvider</span><br><span class="line">                .GetRequiredService&lt;ProxyGenerator&gt;();</span><br><span class="line">            <span class="comment">// Have DI build out an instance of the class that has methods</span></span><br><span class="line">            <span class="comment">// you want to cache (this is a normal instance of that class </span></span><br><span class="line">            <span class="comment">// without caching added)</span></span><br><span class="line">            <span class="keyword">var</span> actual = serviceProvider</span><br><span class="line">                .GetRequiredService&lt;TImplementation&gt;();</span><br><span class="line">            <span class="comment">// Find all of the interceptors that have been registered, </span></span><br><span class="line">            <span class="comment">// including our caching interceptor.  (you might later add a </span></span><br><span class="line">            <span class="comment">// logging interceptor, etc.)</span></span><br><span class="line">            <span class="keyword">var</span> interceptors = serviceProvider</span><br><span class="line">                .GetServices&lt;IInterceptor&gt;().ToArray();</span><br><span class="line">            <span class="comment">// Have Castle Proxy build out a proxy object that implements </span></span><br><span class="line">            <span class="comment">// your interface, but adds a caching layer on top of the</span></span><br><span class="line">            <span class="comment">// actual implementation of the class.  This proxy object is</span></span><br><span class="line">            <span class="comment">// what will then get injected into the class that has a </span></span><br><span class="line">            <span class="comment">// dependency on TInterface</span></span><br><span class="line">            <span class="keyword">return</span> proxyGenerator.CreateInterfaceProxyWithTarget(</span><br><span class="line">                <span class="keyword">typeof</span>(TInterface), actual, interceptors);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Startup-cs"><a href="#Startup-cs" class="headerlink" title="Startup.cs"></a>Startup.cs</h3><p>Fourth, we add a few lines to <code>Startup.cs</code>.</p><p>In <code>Startup.cs</code>, ConfigureServices needs to be changed.  Add two lines for setting up interception.  These two lines register the <code>ProxyGenerator</code> and the <code>CacheInterceptor</code>.  For any classes that need caching added, in addition to adding the <code>CacheAttribute</code> on one of its methods, we register it here with <code>services.AddProxiedScoped&lt;TInterface, T&gt;()</code> instead of  <code>services.AddScoped&lt;TInterface, T&gt;()</code>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Setup Interception</span></span><br><span class="line">    services.AddSingleton(<span class="keyword">new</span> ProxyGenerator());</span><br><span class="line">    services.AddScoped&lt;IInterceptor, CacheInterceptor&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register with the AddProxiedScope method.  When a class needs an </span></span><br><span class="line">    <span class="comment">// IPersonRepository injected, then DynamicProxy will create a proxy</span></span><br><span class="line">    <span class="comment">// object by adding a caching layer on top of the real </span></span><br><span class="line">    <span class="comment">// PersonRepository.  That proxy object will be injected into </span></span><br><span class="line">    <span class="comment">// the class that needs an IPersonRepository injected into it.</span></span><br><span class="line">    services.AddProxiedScoped&lt;IPersonRepository, PersonRepository&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other registrations</span></span><br><span class="line">    services.AddScoped&lt;SomeOtherClassThatDoesntNeedCaching&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This was already in this method because we're doing MVC</span></span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>That’s all of the setup.  When you need to add caching to a method, it will require two steps:</p><ol><li><p>Change the DI registration for the class that has a method that needs to be cached.  This can be done in <code>Startup.ConfigureServices</code> by changing that class’ registration from <code>services.AddScoped</code> to <code>services.AddProxiedScoped</code>.</p></li><li><p>Add the Cache attribute to the method, like this:</p></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Cache(Seconds = 30)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;Person&gt;&gt; GetPeopleByLastName(<span class="keyword">string</span> lastName)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> SomeLongRunningProcess(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thanks to <a href="https://www.linkedin.com/in/zanid-haytam/" target="_blank" rel="noopener">Zanid Haytam</a> for his post on <a href="https://blog.zhaytam.com/2020/08/18/aspnetcore-dynamic-proxies-for-aop/" target="_blank" rel="noopener">AOP using Proxies</a>.  I couldn’t have figured this out this without his blog post.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You had a performance problem, and you solved it by implementing caching:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; people = PersonRepository.GetByLastName(personId);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonRepository&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; secondsToCacheResult = &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;Person&amp;gt;&amp;gt; GetByLastName(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; lastName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cacheKey = buildCacheKey(lastName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_cache.ContainsKey(cacheKey)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _cache[cacheKey] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; Person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This part takes a long time, that&#39;s why we &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// want to cache the results&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; people = SomeLongRunningProcess(lastName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MemoryCacheEntryOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AbsoluteExpirationRelativeToNow = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; System.TimeSpan(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hours: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, minutes: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, seconds: secondsToCacheResult)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cache.Add(cacheKey, people, options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; people;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And it worked!  The performance problem is solved.  But then you start caching things in several places in your repositories, and you end up with this exact same caching code everywhere.  Not only are you violating the &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DRY principle&lt;/a&gt;, but it makes it much harder to understand what’s really going on in the repository method.&lt;/p&gt;
&lt;p&gt;This new problem can be solved by using Aspect Oriented Programming in a Dependency Injection framework by using interception with attributes to make your code look like this instead:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;meta&quot;&gt;Cache(Seconds = 30)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; Task&amp;lt;IEnumerable&amp;lt;Person&amp;gt;&amp;gt; GetPeopleByLastName(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; lastName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SomeLongRunningProcess(lastName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We could use DI to &lt;a href=&quot;https://www.palmmedia.de/Blog/2010/9/26/aop-interception-with-unity-20&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;solve this with Microsoft’s Unity DI&lt;/a&gt;, or &lt;a href=&quot;https://medium.com/@mohsen_rajabi/asp-core-automating-cache-with-aspect-programing-autofac-dynamic-proxy-8e6b84df44e4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;with AutoFac&lt;/a&gt;.  Or we could &lt;a href=&quot;https://doc.postsharp.net/caching-getting-started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;use PostSharp&lt;/a&gt;, which ‘weaves’ the IL of your code with the code for caching at compile time.  But I wanted to get this working with Microsoft’s DI framework that comes with .Net Core 5.&lt;/p&gt;
&lt;p&gt;But there’s a problem - Microsoft’s DI doesn’t natively support interceptors, so we have to bring in some extra help.  In this case, we’re going to use the Castle Project’s DynamicProxy library.  &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mocking Extension Methods</title>
    <link href="http://codethug.com/2017/09/09/Mocking-Extension-Methods/"/>
    <id>http://codethug.com/2017/09/09/Mocking-Extension-Methods/</id>
    <published>2017-09-09T16:21:30.000Z</published>
    <updated>2021-03-17T18:55:57.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mocking"><a href="#Mocking" class="headerlink" title="Mocking"></a>Mocking</h3><p>Mocking is a technique where a dependency to a class is swapped out (mocked) with an alternate/fake equivalent to the functionality so that the class can be tested in isolation from it’s dependencies.  For these examples, I’ll be using the mocking framework <a href="https://github.com/moq/moq4" target="_blank" rel="noopener">Moq</a>.</p><p>Suppose we have a method that we wanted to mock:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPunctuation</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">string</span> <span class="title">AddExclamationPoint</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Punctuation</span> : <span class="title">IPunctuation</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">AddExclamationPoint</span>(<span class="params"><span class="keyword">string</span> s</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">"!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We use the method like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> punctuation = <span class="keyword">new</span> Punctuation();</span><br><span class="line"><span class="keyword">var</span> s = punctuation.AddExclamationPoint(<span class="string">"Hello"</span>);</span><br><span class="line"><span class="comment">// Result: "Hello!"</span></span><br></pre></td></tr></table></figure><p>Mocking this is fairly straighforward using Moq:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> punctuationMock = <span class="keyword">new</span> Mock&lt;IPunctuation&gt;();</span><br><span class="line">punctuationMock</span><br><span class="line">  .Setup(p =&gt; p.AddExclamationPoint(It.IsAny&lt;<span class="keyword">string</span>&gt;()))</span><br><span class="line">  .Returns(<span class="string">"HardcodedResult"</span>);</span><br><span class="line"><span class="keyword">var</span> punctuation = punctuationMock.Object;</span><br></pre></td></tr></table></figure><p>Once mocked, we use it in the exact same way as we use the real Punctuation class, but with the mocked result:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = punctuation.AddExclamationPoint(<span class="string">"Hello"</span>);</span><br><span class="line"><span class="comment">// Result: "HardcodedResult"</span></span><br></pre></td></tr></table></figure><p>That’s mocking. For more on mocking, see <a href="https://github.com/Moq/moq4/wiki/Quickstart" target="_blank" rel="noopener">Moq’s documentation</a>.</p><h3 id="Extension-Methods"><a href="#Extension-Methods" class="headerlink" title="Extension Methods"></a>Extension Methods</h3><p>Extension methods in C# are static methods that provide some helpful syntax to make code that consumes them a little more readable (and chainable).</p><p>We can change the method above to an extension method by making the class and method static and by adding the <code>this</code> keyword:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PunctuationExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AddExclamationPoint</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> s</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">"!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the usage of the extension method is a little cleaner:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello"</span>.AddExclamationPoint();</span><br><span class="line"><span class="comment">// Result: "Hello!";</span></span><br></pre></td></tr></table></figure><h3 id="Mocking-Extension-Methods"><a href="#Mocking-Extension-Methods" class="headerlink" title="Mocking Extension Methods"></a>Mocking Extension Methods</h3><p>I love to mock things when testing, and I love using extension methods, because I find both to be very helpful in writing clean, maintainable code.  But how can we mock an extension method?</p><p>In the example above, how would I mock out the <code>AddExclamationPoint()</code> method from the <code>PunctuationExtensions</code> class?</p><p>Well, you can’t.</p><a id="more"></a><p>But you can get close.  You can create a non-static method on a class that implements an interface, mock the method on the interface, and then create a extension method that acts as a wrapper around either the original method or the mocked method.</p><p>Goals:</p><ul><li>Allow a class to call an extension method where we can mock out the implementation of what happens in that extension method</li><li>Do this without having too much extra boilerplate code</li><li>Avoid using complex solutions like Pex/Moles/IL weaving</li></ul><p>We’re not going to <em>really</em> mock an extension method, but with a little extra code, we can get close enough for practical purposes.</p><p>To do this, we’ll need to keep the original <code>Punctuation</code> class and interface, as seen above:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPunctuation</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">string</span> <span class="title">AddExclamationPoint</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Punctuation</span> : <span class="title">IPunctuation</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">AddExclamationPoint</span>(<span class="params"><span class="keyword">string</span> s</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">"!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we create a <code>PunctuationExtensions</code> class as a thin wrapper around the <code>Punctuation</code> class/interface, allowing an <code>IPunctuation</code> to be injected into the static extensions class:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PunctuationExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> IPunctuation defaultImplementation = <span class="keyword">new</span> Punctuation();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> IPunctuation Implementation &#123; <span class="keyword">private</span> <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    = defaultImplementation;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RevertToDefaultImplementation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Implementation = defaultImplementation;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AddExclamationPoint</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> s</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> Implementation.AddExclamationPoint(s);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can then use it as an extension method without changing the class that<br>consumes it:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello"</span>.AddExclamationPoint();</span><br><span class="line"><span class="comment">// Result: "Hello!";</span></span><br></pre></td></tr></table></figure><p>And we can also mock it when needed, using <a href="https://github.com/moq/moq4" target="_blank" rel="noopener">Moq</a>:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> punctuationMock = <span class="keyword">new</span> Mock&lt;IPunctuation&gt;();</span><br><span class="line">punctuationMock.Setup(p =&gt; p.AddExclamationPoint(It.IsAny&lt;<span class="keyword">string</span>&gt;()))</span><br><span class="line">    .Returns(<span class="string">"HardcodedResult"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inject the mock so that it is used by the extension methods</span></span><br><span class="line">PunctuationExtensions.Implementation = punctuationMock.Object;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The next time we use the extension method, our mock will be used</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello"</span>.AddExclamationPoint();</span><br><span class="line"><span class="comment">// Result: "HardcodedResult"</span></span><br></pre></td></tr></table></figure><p>The key to this is line 6 where we set the <code>Implementation</code> property on the <code>PunctuationExtensions</code> class.  This is where we make the extension method use the mocked implementation of <code>IPunctuation</code> so that we can run a test of our code without depending on the <code>Punctuation</code> class.</p><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h2><p>Don’t forget to clean up after your test by removing the mock.  If you don’t do this, your mock will<br>stick around in the <code>PunctuationExtensions</code> class because it’s static.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PunctuationExtensions.RevertToDefaultImplementation();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mocking&quot;&gt;&lt;a href=&quot;#Mocking&quot; class=&quot;headerlink&quot; title=&quot;Mocking&quot;&gt;&lt;/a&gt;Mocking&lt;/h3&gt;&lt;p&gt;Mocking is a technique where a dependency to a class is swapped out (mocked) with an alternate/fake equivalent to the functionality so that the class can be tested in isolation from it’s dependencies.  For these examples, I’ll be using the mocking framework &lt;a href=&quot;https://github.com/moq/moq4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moq&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Suppose we have a method that we wanted to mock:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IPunctuation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddExclamationPoint&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; s&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Punctuation&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;IPunctuation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddExclamationPoint&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; s&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s + &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We use the method like this:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; punctuation = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Punctuation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = punctuation.AddExclamationPoint(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Result: &quot;Hello!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Mocking this is fairly straighforward using Moq:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; punctuationMock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mock&amp;lt;IPunctuation&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;punctuationMock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .Setup(p =&amp;gt; p.AddExclamationPoint(It.IsAny&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .Returns(&lt;span class=&quot;string&quot;&gt;&quot;HardcodedResult&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; punctuation = punctuationMock.Object;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Once mocked, we use it in the exact same way as we use the real Punctuation class, but with the mocked result:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = punctuation.AddExclamationPoint(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Result: &quot;HardcodedResult&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That’s mocking. For more on mocking, see &lt;a href=&quot;https://github.com/Moq/moq4/wiki/Quickstart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moq’s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Extension-Methods&quot;&gt;&lt;a href=&quot;#Extension-Methods&quot; class=&quot;headerlink&quot; title=&quot;Extension Methods&quot;&gt;&lt;/a&gt;Extension Methods&lt;/h3&gt;&lt;p&gt;Extension methods in C# are static methods that provide some helpful syntax to make code that consumes them a little more readable (and chainable).&lt;/p&gt;
&lt;p&gt;We can change the method above to an extension method by making the class and method static and by adding the &lt;code&gt;this&lt;/code&gt; keyword:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PunctuationExtensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddExclamationPoint&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; s&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s + &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And the usage of the extension method is a little cleaner:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;.AddExclamationPoint();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Result: &quot;Hello!&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Mocking-Extension-Methods&quot;&gt;&lt;a href=&quot;#Mocking-Extension-Methods&quot; class=&quot;headerlink&quot; title=&quot;Mocking Extension Methods&quot;&gt;&lt;/a&gt;Mocking Extension Methods&lt;/h3&gt;&lt;p&gt;I love to mock things when testing, and I love using extension methods, because I find both to be very helpful in writing clean, maintainable code.  But how can we mock an extension method?&lt;/p&gt;
&lt;p&gt;In the example above, how would I mock out the &lt;code&gt;AddExclamationPoint()&lt;/code&gt; method from the &lt;code&gt;PunctuationExtensions&lt;/code&gt; class?&lt;/p&gt;
&lt;p&gt;Well, you can’t.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chrome 58 and Self Signed Certificates in IIS</title>
    <link href="http://codethug.com/2017/09/07/Chrome-58-and-Self-Signed-Certificates-in-IIS/"/>
    <id>http://codethug.com/2017/09/07/Chrome-58-and-Self-Signed-Certificates-in-IIS/</id>
    <published>2017-09-07T16:09:02.000Z</published>
    <updated>2021-03-17T03:54:50.006Z</updated>
    
    <content type="html"><![CDATA[<p>When working in development, sometimes you need to use an SSL certificate.  There is no need to pay a provider to sign one for you, because you can create a ‘self signed’ certificate.  IIS can do this out of the box for localhost - for more Information, see Scott Guthrie’s walkthrough on <a href="https://weblogs.asp.net/scottgu/tip-trick-enabling-ssl-on-iis7-using-self-signed-certificates" target="_blank" rel="noopener">creating a self signed certificate in IIS</a>.</p><p>That worked great, for a while.  But with Chrome 58, which was released in May 2017, a new security feature was introduced which prevents Chrome from trusting a self-signed certificate generated by IIS.  The problem is that IIS generates a self signed SSL certificate that doesn’t include a <a href="https://en.wikipedia.org/wiki/Subject_Alternative_Name" target="_blank" rel="noopener">SubjectAlternativeName</a> (SAN), and starting with Chrome 58, <a href="https://developers.google.com/web/updates/2017/03/chrome-58-deprecations#remove_support_for_commonname_matching_in_certificates" target="_blank" rel="noopener">certificates without a SAN are seen as insecure</a>.  </p><a id="more"></a><p>Here is what Chrome 58 does for a self signed certificate created by IIS:</p><p><img src="https://codethug.blob.core.windows.net/blogmedia/2017/Chrome58-SSLError.png" alt title="SSL Error for missing SubjectAlternativeName"></p><p>Thanks to an <a href="https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate/31900210#31900210" target="_blank" rel="noopener">answer</a> by <a href="https://stackoverflow.com/users/1255956/chris" target="_blank" rel="noopener">Chris</a> on Stack Overflow, I now know how to fix this:</p><ol><li>In chrome’s address bar navigate to <a href="chrome://flags/#allow-insecure-localhost" target="_blank" rel="noopener">chrome://flags/#allow-insecure-localhost</a></li><li>Enable the ‘Allow Insecure Localhost’ setting</li><li>Chrome will prompt you to restart Chrome – Restart Chrome</li></ol><p><img src="https://codethug.blob.core.windows.net/blogmedia/2017/Chrome58-AllowInsecureLocalhost.png" alt title="Enabling &#39;Allow Insecure Localhost&#39;"></p><p>This will tell Chrome to ignore SSL certificate errors when browsing to localhost.  The next time you visit your site in Chrome, you’ll still see the red icon, error, and strikethrough in the address bar, but as long as you are connecting to a port on localhost, Chrome won’t bother you or tell you that you aren’t allowed to load stuff from your site.</p><p><img src="https://codethug.blob.core.windows.net/blogmedia/2017/Chrome58-AddressBarError.png" alt title="Errors that Chrome will Ignore"></p><p>You can then ignore this error in the address bar - it’s there because Chrome analyzed the SSL certificate and saw the that the SAN was missing - but for local development purposes, Chrome will still let you use the site.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When working in development, sometimes you need to use an SSL certificate.  There is no need to pay a provider to sign one for you, because you can create a ‘self signed’ certificate.  IIS can do this out of the box for localhost - for more Information, see Scott Guthrie’s walkthrough on &lt;a href=&quot;https://weblogs.asp.net/scottgu/tip-trick-enabling-ssl-on-iis7-using-self-signed-certificates&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;creating a self signed certificate in IIS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That worked great, for a while.  But with Chrome 58, which was released in May 2017, a new security feature was introduced which prevents Chrome from trusting a self-signed certificate generated by IIS.  The problem is that IIS generates a self signed SSL certificate that doesn’t include a &lt;a href=&quot;https://en.wikipedia.org/wiki/Subject_Alternative_Name&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SubjectAlternativeName&lt;/a&gt; (SAN), and starting with Chrome 58, &lt;a href=&quot;https://developers.google.com/web/updates/2017/03/chrome-58-deprecations#remove_support_for_commonname_matching_in_certificates&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;certificates without a SAN are seen as insecure&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Entity Framework Cache Busting</title>
    <link href="http://codethug.com/2016/02/19/Entity-Framework-Cache-Busting/"/>
    <id>http://codethug.com/2016/02/19/Entity-Framework-Cache-Busting/</id>
    <published>2016-02-19T20:08:05.000Z</published>
    <updated>2021-03-17T03:54:50.007Z</updated>
    
    <content type="html"><![CDATA[<p>The <a href="https://msdn.microsoft.com/en-us/data/jj729737.aspx" target="_blank" rel="noopener">DbContext</a> in Entity Framework 6 automatically caches data that it retrieves from your database.  This is useful, but sometimes data changes outside your context (perhaps by another user) and you end up with stale data.  How can you force Entity Framework to reload the updated data from the database, and when should you do this?</p><p>There are several ways to manage this, depending on which version of Entity Framework you are using and what type of application you are writing.</p><ol><li>Disable Tracking using <code>AsNoTracking()</code></li><li>Throw away the <code>DbContext</code> and create a new one</li><li>Use an <code>ObjectQuery</code> instead of a <code>DBQuery</code> and set <code>MergeOptions</code></li><li>Refresh the Entities</li><li>Detatch the Entities</li><li>Call GetDatabaseValues to get the updated values for a single Entity</li><li>Use the stale data</li></ol><p>Code related to this post can be found at <a href="https://github.com/codethug/EFCaching" target="_blank" rel="noopener">https://github.com/codethug/EFCaching</a></p><a id="more"></a><h3 id="Problem-Caching-in-Entity-Framework-6"><a href="#Problem-Caching-in-Entity-Framework-6" class="headerlink" title="Problem: Caching in Entity Framework 6"></a>Problem: Caching in Entity Framework 6</h3><p>Before we get to the solution, we’ll take a look at the problem.  How does Entity Framework handle caching in general?  Let’s get a list of customers from the database.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> MyDbContext();</span><br><span class="line"><span class="keyword">var</span> customers = context.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">  .Take(<span class="number">2</span>).ToList();</span><br></pre></td></tr></table></figure><p>If we enumerate this <code>customers</code> object, we’ll see these results:</p><pre><code>ID    Name  State---   ----  -----850   Sam   VA851   Sue   VA</code></pre><p>And if we use SQL Profiler, we can see that the LINQ query is translated by EF to this SQL query, which is sent to the database:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP (<span class="number">2</span>)</span><br><span class="line">    [Extent1].[CustomerId] <span class="keyword">AS</span> [CustomerId],</span><br><span class="line">    [Extent1].[<span class="keyword">Name</span>] <span class="keyword">AS</span> [<span class="keyword">Name</span>],</span><br><span class="line">    [Extent1].[State] <span class="keyword">AS</span> [State],</span><br><span class="line">    <span class="comment">-- a bunch of other columns --</span></span><br><span class="line">    <span class="keyword">FROM</span> [dbo].[Customers] <span class="keyword">AS</span> [Extent1]</span><br><span class="line">    <span class="keyword">WHERE</span> [Extent1].[State] = <span class="string">'VA'</span></span><br></pre></td></tr></table></figure><p>That’s not surprising.  Next, we’ll update an existing record - outside of the context we created, as if another user had updated this record.  It turns out we had one of our customer’s names wrong, so the other user corrected it:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers <span class="keyword">SET</span> <span class="keyword">Name</span> = <span class="string">'Susan'</span> <span class="keyword">WHERE</span> CustomerID = <span class="number">851</span></span><br></pre></td></tr></table></figure><p>We’ll try to get the updated data, reusing the context from before:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customers = context.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>).Take(<span class="number">2</span>).ToList();</span><br></pre></td></tr></table></figure><p>If we check out SQL Profiler, sure enough, the exact same SQL Query as above is sent to the database again - and that SQL query returns the name ‘Susan’ for CustomerID 851.  So far, so good.  The updated data from the database is returned.</p><p>However, check out what happens if we then enumerate our <code>customers</code> object:</p><pre><code>ID    Name  State---   ----  -----850   Sam   VA851   Sue   VA</code></pre><p>The name is still the old name - ‘Sue’.  Why am I not seeing the name ‘Susan’?  What’s going on?  </p><p>It turns out that Entity Framework uses the <a href="http://martinfowler.com/eaaCatalog/identityMap.html" target="_blank" rel="noopener">Identity Map</a> pattern.  This means that once an entity with a given key is loaded in the context’s cache, it is never loaded again for as long as that context exists.  So when we hit the database a second time to get the customers, it retrieved the updated <code>851</code> record from the database, but because customer <code>851</code> was already loaded in the context, it ignored the newer record from the database (<a href="http://rlacovara.blogspot.com/2009/03/entity-framework-patterns-identity-map.html" target="_blank" rel="noopener">more</a> <a href="http://odetocode.com/blogs/scott/archive/2008/12/08/identity-maps.aspx" target="_blank" rel="noopener">details</a>).</p><p>That’s the problem.  What can we do about this?  We have several options.</p><h3 id="1-Disable-Tracking-using-AsNoTracking"><a href="#1-Disable-Tracking-using-AsNoTracking" class="headerlink" title="1. Disable Tracking using AsNoTracking()"></a>1. Disable Tracking using <a href="https://msdn.microsoft.com/en-us/library/dn237200%28v=vs.113%29.aspx" target="_blank" rel="noopener">AsNoTracking()</a></h3><p>You can instruct Entity Framework to bypass the cache when making a query by using the <code>AsNoTracking()</code> method:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>).Take(<span class="number">2</span>).AsNoTracking();</span><br></pre></td></tr></table></figure><p>This will cause Entity Framework to retrieve the data from the database, map it to the appropriate C# classes, and return a collection of them to you.  Nothing is added to the context’s cache, and nothing is read from the cache.</p><p>This can be a good option if these entities are read only.  Nonetheless, if you do need to end up editing entities retrieved with <code>AsNoTracking()</code> and save the updated entities, you can always attach the edited entities to the context.</p><p>More Information: <a href="http://www.c-sharpcorner.com/UploadFile/ff2f08/entity-framework-and-asnotracking/" target="_blank" rel="noopener">http://www.c-sharpcorner.com/UploadFile/ff2f08/entity-framework-and-asnotracking/</a></p><h3 id="2-Throw-away-the-DbContext-and-create-a-new-one"><a href="#2-Throw-away-the-DbContext-and-create-a-new-one" class="headerlink" title="2. Throw away the DbContext and create a new one"></a>2. Throw away the <code>DbContext</code> and create a new one</h3><p>The reason we saw a problem above is because we reused the context between the two queries.  If we throw away the first context and use a new context for the second query, then nothing is cached and we get the updated data on the second query.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (context1 = <span class="keyword">new</span> MyDbContext())</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> customers = context1.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">    .Take(<span class="number">2</span>).ToList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update a customer between these two calls</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (context2 = <span class="keyword">new</span> MyDbContext())</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> updatedCustomers = context2.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">    .Take(<span class="number">2</span>).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the data in the database is updated between the two queries, the second query will return the updated data, because <code>context2</code> has a brand new, empty cache.</p><p>How long should you hang on to a context before you throw it away?  Here is Microsoft’s recommendation on how long to hang on to a context that you create:</p><blockquote><p>When working with Web applications, use a context instance per request.<br>When working with Windows Presentation Foundation (WPF) or Windows Forms, use a context instance per form. This lets you use change-tracking functionality that context provides.<br><a href="https://msdn.microsoft.com/en-gb/data/jj729737.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-gb/data/jj729737.aspx</a></p></blockquote><h3 id="3-Use-an-ObjectQuery-instead-of-a-DBQuery-and-set-MergeOptions"><a href="#3-Use-an-ObjectQuery-instead-of-a-DBQuery-and-set-MergeOptions" class="headerlink" title="3. Use an ObjectQuery instead of a DBQuery and set MergeOptions"></a>3. Use an <code>ObjectQuery</code> instead of a <code>DBQuery</code> and set <code>MergeOptions</code></h3><p>You probably have a <code>DbContext</code> that has <code>DbSet</code> properties, like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDbContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> DbSet&lt;Customer&gt; Customers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When you then query for some customers, you’ll receive back an <code>IQueryable&lt;Customer&gt;</code> object (an object with a type of <code>DbQuery&lt;Customer&gt;</code>).</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> MyDbContext();</span><br><span class="line"><span class="comment">// californiaCustomers is a DbQuery&lt;Customer&gt;</span></span><br><span class="line"><span class="comment">// (which is a IQueryable&lt;Customer&gt;)</span></span><br><span class="line"><span class="keyword">var</span> californiaCustomers = context.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>);</span><br></pre></td></tr></table></figure><p>However, if we create an <code>ObjectQuery</code> instead of a <code>DbQuery</code>, we can set the <a href="https://msdn.microsoft.com/en-us/library/system.data.objects.mergeoption%28v=vs.110%29.aspx" target="_blank" rel="noopener"><code>MergeOption</code></a> property on the <code>ObjectQuery</code>.  This can be set to one of 4 enumerated values: <code>AppendOnly</code>, <code>NoTracking</code>, <code>OverwriteChanges</code>, and <code>PreserveChanges</code>.  Using <code>NoTracking</code> does effectively the same thing as the <code>AsNoTracking()</code> extension method we just discussed.  In our case, we want to use <code>OverwriteChanges</code>, which does the following:</p><blockquote><p>OverwriteChanges: Objects that do not exist in the object context are attached to the context. If an object is already in the context, the current and original values of object’s properties in the entry are overwritten with data source values. The state of the object’s entry is set to Unchanged, no properties are marked as modified.<br><a href="https://msdn.microsoft.com/en-us/library/system.data.objects.mergeoption%28v=vs.110%29.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/system.data.objects.mergeoption%28v=vs.110%29.aspx</a></p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> MyDbContext(),</span><br><span class="line">  <span class="comment">// Get ObjectContext from DBContext</span></span><br><span class="line">  objectContext = ((IObjectContextAdapter)context).ObjectContext) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Construct an ObjectQuery</span></span><br><span class="line">  <span class="keyword">var</span> customers = objectContext.CreateObjectSet&lt;Customer&gt;()</span><br><span class="line">    .Where(c =&gt; c.State == <span class="string">"VA"</span>).Take(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the MergeOption property</span></span><br><span class="line">  (customers <span class="keyword">as</span> ObjectQuery&lt;Customer&gt;).MergeOption =</span><br><span class="line">    MergeOption.OverwriteChanges;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Do something with your data</span></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="keyword">var</span> customer <span class="keyword">in</span> customers) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, we retrieve the <code>ObjectContext</code> from the <code>DbContext.</code>  <code>DbContext</code> is a wrapper around <code>ObjectContext</code> that makes many things easier, and allows for a Code First EF approach.  However, sometimes you need to get at the underlying <code>ObjectContext</code> to do things that <code>DbContext</code> doesn’t support.  This is one of those times.</p><p>Once we have the <code>ObjectContext</code>, we create a <code>ObjectSet&lt;Customer&gt;</code>, off which we can build a LINQ query.  Once we’ve written our query, we have a <code>ObjectQuery&lt;Customer&gt;</code>, but the LINQ query returns it as an <code>IQueryable&lt;Customer&gt;</code>.  Once we cast it to an <code>ObjectQuery&lt;Customer&gt;</code>, we can access the <code>MergeOption</code> property and set it to <code>MergeOption.OverwriteChanges</code>.</p><p>That will allow you to force EF to update the data in the cache with data from the database using a specific LINQ query.</p><h3 id="4-Refresh-the-Entities"><a href="#4-Refresh-the-Entities" class="headerlink" title="4. Refresh the Entities"></a>4. Refresh the Entities</h3><p>Another way to get Entity Framework to update entities in the cache is to call the Refresh method.  The first way to do this is by issuing one SQL command for each entity that you want to refresh.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customersToRefresh = context.Customers.Where(c =&gt; someFilter(c));</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> customer <span class="keyword">in</span> customersToRefresh)</span><br><span class="line">&#123;</span><br><span class="line">  context.Entry(customer).Reload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will suffice if you only have a couple of entities to refresh, but if you have a large collection to reload, you’ll hit the database for each and every entity that you reload, which can be a serious performance problem.</p><p>You can also reload data using the <code>Refresh</code> method on the <code>ObjectContext</code>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectContext = ((IObjectContextAdapter) context).ObjectContext;</span><br><span class="line"><span class="keyword">var</span> objectsToRefresh = <span class="keyword">new</span> Customer[] &#123; jim, sue &#125;;</span><br><span class="line">objectContext.Refresh(RefreshMode.StoreWins, objectsToRefresh);</span><br></pre></td></tr></table></figure><p>This is better than calling <code>Reload()</code>, because it batches all of the queries together.  However, it will have to look up every entity by it’s ID, which can also cause performance problems if you’re looking up more than a few.  Here is what the SQL looks like for <code>Reload()</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [Extent1].[<span class="keyword">ID</span>] <span class="keyword">AS</span> [<span class="keyword">ID</span>],</span><br><span class="line">    [Extent1].[<span class="keyword">Name</span>] <span class="keyword">AS</span> [<span class="keyword">Name</span>],</span><br><span class="line">    [Extent1].[State] <span class="keyword">AS</span> [State]</span><br><span class="line">    <span class="keyword">FROM</span> [dbo].[Customers] <span class="keyword">AS</span> [Extent1]</span><br><span class="line">    <span class="keyword">WHERE</span> [Extent1].[<span class="keyword">ID</span>] <span class="keyword">IN</span> (<span class="number">124</span>,<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h3 id="5-Detatch-the-entities"><a href="#5-Detatch-the-entities" class="headerlink" title="5. Detatch the entities"></a>5. Detatch the entities</h3><p>You can explicitly remove an entity from the cache.  Then, the next time you retrieve it from the database, the data from the database will be loaded into the cache.  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Load data from cache</span></span><br><span class="line"><span class="keyword">var</span> sue = context.Customers.Where(c =&gt; c.ID == <span class="number">15</span>).First();</span><br><span class="line"><span class="comment">// Detatch sue, removing her entity from the cache</span></span><br><span class="line">context.Entry(sue).State = EntityState.Detatched;</span><br><span class="line"><span class="comment">// Reload the data from the database into the cache</span></span><br><span class="line">sue = context.Customers.Where(c =&gt; c.ID == <span class="number">15</span>).First();</span><br></pre></td></tr></table></figure><h3 id="6-Call-GetDatabaseValues-to-get-the-updated-values-for-a-single-Entity"><a href="#6-Call-GetDatabaseValues-to-get-the-updated-values-for-a-single-Entity" class="headerlink" title="6. Call GetDatabaseValues to get the updated values for a single Entity"></a>6. Call GetDatabaseValues to get the updated values for a single Entity</h3><p>Another way to bypass the DbContext cache is to call <code>GetDatabaseValues()</code>.  This will not affect the cache at all, but will query the database for the latest data for a particular entity, and return a dictionary with the latest data.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve stale entity from cache</span></span><br><span class="line"><span class="keyword">var</span> sue = context1.Customers.First(c =&gt; c.ID == <span class="number">15</span>);</span><br><span class="line">Console.WriteLine(sue.Name); <span class="comment">// outputs "Sue", the stale data in the cache</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use GetDatabaseValues to get a dictionary of the current</span></span><br><span class="line"><span class="comment">// Database values (ignoring the cache)</span></span><br><span class="line">DbPropertyValues sueDbValues = context1.Entry(sueNotUpdated)</span><br><span class="line">  .GetDatabaseValues();</span><br><span class="line"><span class="comment">// outputs "Susan", the latest data from the database</span></span><br><span class="line">console.WriteLine(sueDbValues[<span class="string">"Name"</span>]);</span><br></pre></td></tr></table></figure><p>For more information, see <a href="https://msdn.microsoft.com/en-us/data/jj592677.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/data/jj592677.aspx</a>.</p><h3 id="7-Use-the-stale-data"><a href="#7-Use-the-stale-data" class="headerlink" title="7. Use the stale data."></a>7. Use the stale data.</h3><p>Sometimes, the correct approach is to use the stale data in the cache.  You don’t always need the latest, most accurate data.  Sometimes old data is good enough.  </p><h3 id="Caution-Deleted-Data"><a href="#Caution-Deleted-Data" class="headerlink" title="Caution: Deleted Data"></a>Caution: Deleted Data</h3><p>If another user has deleted data in the database and you have entities for those deleted items, the entities will not automatically disappear or be set to null.  They won’t even automatically have their Entity State set to <code>EntityState.Deleted</code>.  In order to get the news that these entities have been deleted, you must use one of the methods in this post to get the updated data and notice that the entity no longer exists in the result set.</p><h3 id="Caution-Related-Entities"><a href="#Caution-Related-Entities" class="headerlink" title="Caution: Related Entities"></a>Caution: Related Entities</h3><p>If you retrieve <code>Customer</code> entities from your database and also <code>Include</code> related <code>Invoice</code> entities, and the related data is updated by another user, making your <code>Invoice</code> entities stale, and you use the strategies in this post to force the context to update its cache with the latest <code>Customer</code> entities, it will <em>not</em> automatically update the related <code>Invoice</code> entities.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve customers with related invoices</span></span><br><span class="line"><span class="keyword">var</span> customer = context.Customers</span><br><span class="line">  .Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">  .Include(c =&gt; c.Invoices)</span><br><span class="line">  .First();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some other user updates one of the Invoices you retrieved.  </span></span><br><span class="line"><span class="comment">// Your invoice data is now stale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Force the context to reload your customer the next time you query for it</span></span><br><span class="line">context.Entry(customer).State = EntityState.Detatched;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reload the customer.  You'll still have stale Invoice Data</span></span><br><span class="line"><span class="keyword">var</span> customer = context.Customers</span><br><span class="line">  .Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">  .Include(c =&gt; c.Invoices)</span><br><span class="line">  .First();</span><br></pre></td></tr></table></figure><p>If you want to get the latest Invoice data, you’ll need to clear the cache for the Invoices before you query the context again.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Detatch your invoices from the context, forcing them</span></span><br><span class="line"><span class="comment">// to be reloaded on the next query</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> invoice <span class="keyword">in</span> customer.Invoices)</span><br><span class="line">&#123;</span><br><span class="line">  context.Entry(invoice).State = EntityState.Detatched;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reload the customer.  This time you'll see the updated Invoice entities</span></span><br><span class="line"><span class="keyword">var</span> customer = context.Customers</span><br><span class="line">  .Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">  .Include(c =&gt; c.Invoices)</span><br><span class="line">  .First();</span><br></pre></td></tr></table></figure><h3 id="Good-News-Added-Data"><a href="#Good-News-Added-Data" class="headerlink" title="Good News: Added Data"></a>Good News: Added Data</h3><p>The good news is that if another user adds data to the database, Entity Framework’s caching mechanism will allows it to pick up on those changes, even if you don’t use any of the ideas outlined in this post.  If you have a context where you query the database, another user adds a record, and then you reuse your original context to query the database again, the second query will pick up any new records that match the query.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context1 = <span class="keyword">new</span> EFTestContext())</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Get count of customers in Virginia</span></span><br><span class="line">  <span class="keyword">var</span> numInVABefore = context1.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">    .ToList().Count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add new customer using other context (simulating a second user)</span></span><br><span class="line">  <span class="keyword">int</span> jamesID;</span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> context2 = <span class="keyword">new</span> EFTestContext())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> james = context2.AddCustomer(<span class="string">"James"</span>, <span class="string">"VA"</span>);</span><br><span class="line">    context2.SaveChanges();</span><br><span class="line">    jamesID = james.ID;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Verify new record exists in database</span></span><br><span class="line">  <span class="keyword">using</span> (<span class="keyword">var</span> context3 = <span class="keyword">new</span> EFTestContext())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> jamesExists = context3.Customers</span><br><span class="line">      .FirstOrDefault(c =&gt; c.ID == jamesID);</span><br><span class="line">    jamesExists.Should().NotBeNull();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// And our original context shows the new record when queried</span></span><br><span class="line">  <span class="keyword">var</span> numInVAAfter = context1.Customers.Where(c =&gt; c.State == <span class="string">"VA"</span>)</span><br><span class="line">    .ToList().Count;</span><br><span class="line">  numInVAAfter.Should().Be(numInVABefore + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><ul><li><a href="http://stackoverflow.com/questions/15828811/entity-framework-caching-issue" target="_blank" rel="noopener">http://stackoverflow.com/questions/15828811/entity-framework-caching-issue</a></li><li><a href="http://martinfowler.com/eaaCatalog/identityMap.html" target="_blank" rel="noopener">Identity Map Pattern</a></li><li><a href="http://www.c-sharpcorner.com/UploadFile/ff2f08/entity-framework-and-asnotracking/" target="_blank" rel="noopener">AsNoTracking()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The &lt;a href=&quot;https://msdn.microsoft.com/en-us/data/jj729737.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DbContext&lt;/a&gt; in Entity Framework 6 automatically caches data that it retrieves from your database.  This is useful, but sometimes data changes outside your context (perhaps by another user) and you end up with stale data.  How can you force Entity Framework to reload the updated data from the database, and when should you do this?&lt;/p&gt;
&lt;p&gt;There are several ways to manage this, depending on which version of Entity Framework you are using and what type of application you are writing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disable Tracking using &lt;code&gt;AsNoTracking()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Throw away the &lt;code&gt;DbContext&lt;/code&gt; and create a new one&lt;/li&gt;
&lt;li&gt;Use an &lt;code&gt;ObjectQuery&lt;/code&gt; instead of a &lt;code&gt;DBQuery&lt;/code&gt; and set &lt;code&gt;MergeOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Refresh the Entities&lt;/li&gt;
&lt;li&gt;Detatch the Entities&lt;/li&gt;
&lt;li&gt;Call GetDatabaseValues to get the updated values for a single Entity&lt;/li&gt;
&lt;li&gt;Use the stale data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Code related to this post can be found at &lt;a href=&quot;https://github.com/codethug/EFCaching&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/codethug/EFCaching&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Simple interface for fluently mocking a DbSet</title>
    <link href="http://codethug.com/2015/03/20/mocking-dbset/"/>
    <id>http://codethug.com/2015/03/20/mocking-dbset/</id>
    <published>2015-03-20T13:45:46.000Z</published>
    <updated>2021-03-17T03:54:50.019Z</updated>
    
    <content type="html"><![CDATA[<p>You are testing, right?  Have you ever used a mock in your test?  When testing a class, a mock allows you to create an object that looks just like an object that your class depends on, but acts in a very specific way that you specify for your test, so that you can test your class completely isolated from the rest of your code.  If you’re not familiar with mocks, visit <a href="https://github.com/Moq/moq4/wiki/Quickstart" target="_blank" rel="noopener">Moq’s quickstart guide</a> to get started.</p><p>Now that you know about mocks, let’s look at mocking something a little more complicated.  If you’ve ever wanted to unit test a method that uses a <code>DbSet&lt;T&gt;</code> to retrieve data, it can be challenging to figure out how to properly mock the <code>DbSet&lt;T&gt;</code>.</p><a id="more"></a><p>Suppose your code looked like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDbContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Needs to be virtual so that our mocked item can override it</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;Customer&gt; Customers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Repository</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> MyDbContext context;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Repository</span>(<span class="params">MyDbContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The method you want to test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">FindCustomersByPostalCode</span>(<span class="params"><span class="keyword">string</span> postalCode</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> context.Customers</span><br><span class="line">      .Where(c =&gt; c.PostalCode == postalCode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With <a href="https://github.com/Moq/moq4" target="_blank" rel="noopener">Moq</a> for mocking, you might start by creating a mocked object:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mockedContext = <span class="keyword">new</span> Mock&lt;MyDbContext&gt;();</span><br><span class="line">mockedContext.Setup(c =&gt; c.Customers).Returns( ??? );</span><br></pre></td></tr></table></figure><p>But how do you set it up?  There are 3 properties and a method you need to mock inside a <code>DbSet&lt;T&gt;</code> to properly mock it: <code>Provider</code>, <code>Expression</code>, <code>ElementType</code>, and <code>GetEnumerator()</code>.  I put together the following extension methods to make it easy to mock a <code>DbSet&lt;T&gt;</code>:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DbSetMocking</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Mock&lt;DbSet&lt;T&gt;&gt; CreateMockSet&lt;T&gt;(IQueryable&lt;T&gt; data)</span><br><span class="line"><span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> queryableData = data.AsQueryable();</span><br><span class="line"><span class="keyword">var</span> mockSet = <span class="keyword">new</span> Mock&lt;DbSet&lt;T&gt;&gt;();</span><br><span class="line">mockSet.As&lt;IQueryable&lt;T&gt;&gt;().Setup(m =&gt; m.Provider)</span><br><span class="line">.Returns(queryableData.Provider);</span><br><span class="line">mockSet.As&lt;IQueryable&lt;T&gt;&gt;().Setup(m =&gt; m.Expression)</span><br><span class="line">.Returns(queryableData.Expression);</span><br><span class="line">mockSet.As&lt;IQueryable&lt;T&gt;&gt;().Setup(m =&gt; m.ElementType)</span><br><span class="line">.Returns(queryableData.ElementType);</span><br><span class="line">mockSet.As&lt;IQueryable&lt;T&gt;&gt;().Setup(m =&gt; m.GetEnumerator())</span><br><span class="line">.Returns(queryableData.GetEnumerator());</span><br><span class="line"><span class="keyword">return</span> mockSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IReturnsResult&lt;TContext&gt; ReturnsDbSet&lt;TEntity, TContext&gt;(</span><br><span class="line"><span class="keyword">this</span> IReturns&lt;TContext, DbSet&lt;TEntity&gt;&gt; setup,</span><br><span class="line">TEntity[] entities)</span><br><span class="line"><span class="keyword">where</span> TEntity : <span class="keyword">class</span></span><br><span class="line"><span class="title">where</span> <span class="title">TContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> mockSet = CreateMockSet(entities.AsQueryable());</span><br><span class="line"><span class="keyword">return</span> setup.Returns(mockSet.Object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IReturnsResult&lt;TContext&gt; ReturnsDbSet&lt;TEntity, TContext&gt;(</span><br><span class="line"><span class="keyword">this</span> IReturns&lt;TContext, DbSet&lt;TEntity&gt;&gt; setup,</span><br><span class="line">IQueryable&lt;TEntity&gt; entities)</span><br><span class="line"><span class="keyword">where</span> TEntity : <span class="keyword">class</span></span><br><span class="line"><span class="title">where</span> <span class="title">TContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> mockSet = CreateMockSet(entities);</span><br><span class="line"><span class="keyword">return</span> setup.Returns(mockSet.Object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IReturnsResult&lt;TContext&gt; ReturnsDbSet&lt;TEntity, TContext&gt;(</span><br><span class="line"><span class="keyword">this</span> IReturns&lt;TContext, DbSet&lt;TEntity&gt;&gt; setup,</span><br><span class="line">IEnumerable&lt;TEntity&gt; entities)</span><br><span class="line"><span class="keyword">where</span> TEntity : <span class="keyword">class</span></span><br><span class="line"><span class="title">where</span> <span class="title">TContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> mockSet = CreateMockSet(entities.AsQueryable());</span><br><span class="line"><span class="keyword">return</span> setup.Returns(mockSet.Object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To use this, first create some sample data that the mocked <code>DbSet&lt;T&gt;</code> will return.  This data can be in an <code>Array&lt;T&gt;</code>, <code>IQueryable&lt;T&gt;</code>, or anything that implements <code>IEnumerable&lt;T&gt;</code>, such as a <code>List&lt;T&gt;</code>.  Then create and setup the mocked <code>DbSet&lt;Customer&gt;</code>.  Note the use of the new <code>ReturnsDbSet</code> extension method:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fakeCustomers = <span class="keyword">new</span> Customer[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span> Customer() &#123; Name = <span class="string">"George"</span>, PostalCode = <span class="string">"01523"</span> &#125;,</span><br><span class="line"><span class="keyword">new</span> Customer() &#123; Name = <span class="string">"Susan"</span>, PostalCode = <span class="string">"12345"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mockedContext = <span class="keyword">new</span> Mock&lt;MyDbContext&gt;();</span><br><span class="line">mockedContext.Setup(c =&gt; c.Customers).ReturnsDbSet(fakeCustomers);</span><br></pre></td></tr></table></figure><p>Now your mocked context is ready to be used in your test.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> repository = <span class="keyword">new</span> Repository(mockedContext.<span class="keyword">object</span>);</span><br><span class="line"><span class="keyword">var</span> result = repository.FindCustomersByPostalCode(<span class="string">"01523"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Fluent Assertions</span></span><br><span class="line">result.Single().Name.Should().Be(<span class="string">"George"</span>);</span><br></pre></td></tr></table></figure><p>References:</p><ul><li><a href="http://msdn.microsoft.com/en-us/data/dn314429.aspx" target="_blank" rel="noopener">http://msdn.microsoft.com/en-us/data/dn314429.aspx</a></li><li><a href="http://aikmeng.com/post/62817541825/how-to-mock-dbcontext-and-dbset-with-moq-for-unit" target="_blank" rel="noopener">http://aikmeng.com/post/62817541825/how-to-mock-dbcontext-and-dbset-with-moq-for-unit</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You are testing, right?  Have you ever used a mock in your test?  When testing a class, a mock allows you to create an object that looks just like an object that your class depends on, but acts in a very specific way that you specify for your test, so that you can test your class completely isolated from the rest of your code.  If you’re not familiar with mocks, visit &lt;a href=&quot;https://github.com/Moq/moq4/wiki/Quickstart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moq’s quickstart guide&lt;/a&gt; to get started.&lt;/p&gt;
&lt;p&gt;Now that you know about mocks, let’s look at mocking something a little more complicated.  If you’ve ever wanted to unit test a method that uses a &lt;code&gt;DbSet&amp;lt;T&amp;gt;&lt;/code&gt; to retrieve data, it can be challenging to figure out how to properly mock the &lt;code&gt;DbSet&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term=".Net" scheme="http://codethug.com/categories/Net/"/>
    
      <category term="Testing" scheme="http://codethug.com/categories/Net/Testing/"/>
    
    
  </entry>
  
  <entry>
    <title>Web API Deep Dive - Testing with EF Rollbacks across HTTP (part 6 of 6)</title>
    <link href="http://codethug.com/2015/02/20/web-api-deep-dive-ef-rollbacks/"/>
    <id>http://codethug.com/2015/02/20/web-api-deep-dive-ef-rollbacks/</id>
    <published>2015-02-20T14:30:34.000Z</published>
    <updated>2021-03-17T03:54:50.032Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some <a href="http://www.asp.net/web-api" target="_blank" rel="noopener">great documentation</a> on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.</p><ul><li>Part 1 - <a href="/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6">Customizing auto-generated documentation</a></li><li>Part 2 - <a href="/2015/01/23/web-api-http-response-codes">HTTP Response Codes</a></li><li>Part 3 - <a href="/2015/01/30/web-api-exception-handling/">HTTP Error Codes from Exceptions</a></li><li>Part 4 - <a href="/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/">OData URL Query Options</a></li><li>Part 5 - <a href="/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/">DTO Transformations and Automapper</a></li><li>Part 6 - Testing with EF Rollbacks across HTTP (this article)</li></ul><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>A few weeks ago I wrote an article called <a href="/2014/08/15/cleaning-up-ef-6-tests-with-transaction-rollbacks/">Cleaning Up EF 6 Tests With Transactions Rollbacks</a>, where I showed how to create integration tests that set up some data in a database, run a test against the data, and then roll back all changes to the data.  The rollback was possible because all of the changes to the data were wrapped up inside a transaction.</p><p>This posts extends that idea, but instead of a test calling methods on a repository or service layer, this test makes an HTTP call against a Web API endpoint, while preserving the ability to revert all changes to the database as part of a transaction rollback.</p><p>The interesting part here is that we will create a database context, start a transaction against that context, create some test data, and then spin up a Web API server that uses that same context.  When we’re done with our tests, we’ll roll back the transaction so that the database changes are all reverted.</p><p><strong>2016-01-27 Update - clarified when Configuration is available in an API Controller</strong></p><a id="more"></a><h3 id="Base-API-Test-Class"><a href="#Base-API-Test-Class" class="headerlink" title="Base API Test Class"></a>Base API Test Class</h3><p>First, let’s look at the <code>TransactionTest</code> class that we created earlier.  If you haven’t seen this before, I’d recommend reviewing <a href="/2014/08/15/cleaning-up-ef-6-tests-with-transaction-rollbacks/">my earlier post</a>.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransactionTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">protected</span> EntitiesV3 context;</span><br><span class="line">  <span class="keyword">protected</span> DbContextTransaction transaction;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">AssemblyInitialize</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssemblyStart</span>(<span class="params">TestContext testContext</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    RetryDbConfiguration.SuspendExecutionStrategy = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">TestInitialize</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransactionTestStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    context = <span class="keyword">new</span> EntitiesV3();</span><br><span class="line">    transaction = context.Database.BeginTransaction();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">TestCleanup</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransactionTestEnd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    transaction.Rollback();</span><br><span class="line">    transaction.Dispose();</span><br><span class="line">    context.Dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">AssemblyCleanup</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AssemblyEnd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    RetryDbConfiguration.SuspendExecutionStrategy = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve seen that before.  It allows us to create a test inside a database transaction that can be rolled back.  How do we extend this to Web API calls?  Here is the code:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestClass</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">WebApiHostedTests</span> : <span class="title">TransactionTest</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HttpServer server;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> baseurl = <span class="string">"http://localhost:50366/"</span>;</span><br><span class="line"><span class="keyword">private</span> HttpClient client;</span><br><span class="line"><span class="keyword">private</span> HttpRequestMessage request;</span><br><span class="line"><span class="keyword">private</span> HttpResponseMessage response;</span><br><span class="line"></span><br><span class="line">[<span class="meta">TestInitialize</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WebApiHostedTestBaseStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> HttpConfiguration();</span><br><span class="line">config.IncludeErrorDetailPolicy = IncludeErrorDetailPolicy.Always;</span><br><span class="line">config.Properties[<span class="string">"context"</span>] = context;</span><br><span class="line">WebApiConfig.Register(config);</span><br><span class="line">server = <span class="keyword">new</span> HttpServer(config);</span><br><span class="line">client = <span class="keyword">new</span> HttpClient(server);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">TestCleanup</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WebApiHostedTestBaseEnd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (request != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">request.Dispose();</span><br><span class="line">request = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">response.Dispose();</span><br><span class="line">response = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> TestHttpResponse&lt;T&gt; Get&lt;T&gt;(<span class="keyword">string</span> url)</span><br><span class="line">&#123;</span><br><span class="line">request = createRequest&lt;<span class="keyword">string</span>&gt;(url, <span class="string">"application/json"</span>,</span><br><span class="line">HttpMethod.Get, <span class="literal">null</span>, <span class="keyword">new</span> JsonMediaTypeFormatter());</span><br><span class="line">response = client.SendAsync(request).Result;</span><br><span class="line"><span class="keyword">var</span> data = (T)((ObjectContent)(response.Content)).Value;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TestHttpResponse&lt;T&gt;(response, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpRequestMessage createRequest&lt;T&gt;(<span class="keyword">string</span> url, <span class="keyword">string</span> mthv,</span><br><span class="line">HttpMethod method, T content, MediaTypeFormatter formatter)</span><br><span class="line"><span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage();</span><br><span class="line">request.RequestUri = <span class="keyword">new</span> Uri(baseurl + url);</span><br><span class="line">request.Headers.Accept.Add(</span><br><span class="line">          <span class="keyword">new</span> MediaTypeWithQualityHeaderValue(mthv));</span><br><span class="line">request.Method = method;</span><br><span class="line">request.Content = <span class="keyword">new</span> ObjectContent&lt;T&gt;(content, formatter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add authentication here if needed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s look at this one piece at a time.  First, we have the <code>WebApiHostedTestBaseStart</code>.  Because of the <code>[TestStart]</code> attribute, this will be run before each test is run.  Because this class inherits from the <code>TransactionTest</code> class, the <code>TransactionTestStart</code> method has already run, so we have a context ready.  The <code>WebApiHostedTestBaseStart</code> does the following:</p><ul><li>It creates an <code>HttpConfiguration</code> and adds the <code>context</code> as a property on this configuration.  (the <code>Properties</code> property is a collection of arbitrary objects that we can see inside our Web API code.  This allows us to pass the context into our Web Api project.  We’ll look at that momentarily)</li><li>It creates an in-memory <code>HttpServer</code>, which allows us to run our Web API project in the test runner process without having to spin up IIS or any other web server.</li><li>It creates an <code>HttpClient</code> and configures it to connect to our in-memory <code>HttpServer</code>.</li></ul><p>The <code>WebApiHostedTestBaseEnd</code> method runs after each test is run because of the <code>[TestCleanup]</code> attribute.  This cleans up the objects that we created in <code>WebApiHostedTestBaseStart</code>.</p><p>The <code>Get</code> method, given a URL, makes a HTTP GET call to the server, receives JSON back from the server, and deserializes the JSON into a strongly typed object of type <code>T</code>.  The deserialization happens in this line:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = (T)((ObjectContent)(response.Content)).Value;</span><br></pre></td></tr></table></figure><h3 id="TestHttpResponse"><a href="#TestHttpResponse" class="headerlink" title="TestHttpResponse"></a>TestHttpResponse</h3><p>The <code>Get</code> method then returns a TestHttpResponse, which is an object that contains the strongly typed <code>T</code> along with the raw HTTP response.  This allows our test to check the data that was returned, and it allows our test to check the HTTP response codes and headers that are returned.  A Web API is composed of many HTTP endpoints that should return various <a href="http://httpstatus.es/" target="_blank" rel="noopener">HTTP responses codes</a>, and this allows us to test those response codes.</p><p></p><p>Here is the implementation of <code>TestHttpResponse</code>:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class TestHttpResponse&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestHttpResponse</span>(<span class="params">HttpResponseMessage message, T data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.Message = message;</span><br><span class="line"><span class="keyword">this</span>.Data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HttpResponseMessage Message &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> T Data &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Context-Injection"><a href="#Context-Injection" class="headerlink" title="Context Injection"></a>Context Injection</h3><p>Next, we’ll make use of the context that this sets up for us.  In our API controller, we’ll need to grab the context from our <code>HttpConfiguration</code>.  <code>HttpConfiguration</code> is a property on all controllers that inherit from <code>ApiController</code>.  Our code above created and then injected the context into the configuration with this line:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.Properties[<span class="string">"context"</span>] = context;</span><br></pre></td></tr></table></figure><p>And this is how we can make use of that context in our API Controllers:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> FooContext _context;</span><br><span class="line"><span class="keyword">private</span> FooContext context</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_context == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Configuration == <span class="literal">null</span> || Configuration.Properties == <span class="literal">null</span></span><br><span class="line">                 || !Configuration.Properties.ContainsKey(<span class="string">"context"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// No context was passed in from our tests</span></span><br><span class="line">                <span class="comment">// Create our context using the connection</span></span><br><span class="line">                <span class="comment">// string "FooContext" </span></span><br><span class="line">                context = <span class="keyword">new</span> FooContext();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// This is running inside an integration test, so use</span></span><br><span class="line">                <span class="comment">// the context that is provided by the test:</span></span><br><span class="line">                context = (FooContext)Configuration.Properties[<span class="string">"context"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2016-01-27 Update - The Configuration property cannot be used in the constructor for your API Controller, because it is not populated until after the controller is constructed.  If  you try to use Configuration in the constructor, it will be null.  Instead, it can be accessed on-the-fly by creating a property, such as seen above, that will only be used after the object is created.</p><h3 id="Writing-a-Test"><a href="#Writing-a-Test" class="headerlink" title="Writing a Test"></a>Writing a Test</h3><p></p><p>Now that we have all of these great things set up, how do we use them?  We need to create a test class that inherits from <code>WebApiHostedTests</code>:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestClass</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooControllerTests</span> : <span class="title">WebApiHostedTests</span></span><br><span class="line">&#123;</span><br><span class="line">[<span class="meta">TestMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallingGetItemByNameReturnsItem</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Arrange</span></span><br><span class="line">context.Items.Add(<span class="keyword">new</span> Item() &#123;Name = <span class="string">"Thing"</span>, Id = <span class="number">17</span>&#125;);</span><br><span class="line">context.SaveChanges();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="keyword">string</span>.Format(<span class="string">"api/items/&#123;0&#125;"</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">var</span> response = Get&lt;Item&gt;(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assert</span></span><br><span class="line">response.Message.StatusCode.Should().Be(HttpStatusCode.OK);</span><br><span class="line">response.Data.Id.Should().Be(<span class="number">17</span>);</span><br><span class="line">response.Data.Name.Should().Be(<span class="string">"Thing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The goal of the code in this post is to make these tests simple and readable.  The test adds data to your context, makes an HTTP call, specifying what type of data it expects to get back (<code>Item</code> in this case), and it then verifies that the HTTP Response looks good and that the data that is returned looks good.  The test itself has minimal boilerplate code, and it cleans up after itself.</p><h3 id="Closing"><a href="#Closing" class="headerlink" title="Closing"></a>Closing</h3><p>Thanks for sticking with me in this series on Web API.  Feel free to tweet me <a href="http://www.twitter.com/codethug" target="_blank" rel="noopener">@codethug</a> if you’d like to follow up on anything.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some &lt;a href=&quot;http://www.asp.net/web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;great documentation&lt;/a&gt; on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href=&quot;/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6&quot;&gt;Customizing auto-generated documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href=&quot;/2015/01/23/web-api-http-response-codes&quot;&gt;HTTP Response Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href=&quot;/2015/01/30/web-api-exception-handling/&quot;&gt;HTTP Error Codes from Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4 - &lt;a href=&quot;/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/&quot;&gt;OData URL Query Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5 - &lt;a href=&quot;/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/&quot;&gt;DTO Transformations and Automapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6 - Testing with EF Rollbacks across HTTP (this article)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;A few weeks ago I wrote an article called &lt;a href=&quot;/2014/08/15/cleaning-up-ef-6-tests-with-transaction-rollbacks/&quot;&gt;Cleaning Up EF 6 Tests With Transactions Rollbacks&lt;/a&gt;, where I showed how to create integration tests that set up some data in a database, run a test against the data, and then roll back all changes to the data.  The rollback was possible because all of the changes to the data were wrapped up inside a transaction.&lt;/p&gt;
&lt;p&gt;This posts extends that idea, but instead of a test calling methods on a repository or service layer, this test makes an HTTP call against a Web API endpoint, while preserving the ability to revert all changes to the database as part of a transaction rollback.&lt;/p&gt;
&lt;p&gt;The interesting part here is that we will create a database context, start a transaction against that context, create some test data, and then spin up a Web API server that uses that same context.  When we’re done with our tests, we’ll roll back the transaction so that the database changes are all reverted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2016-01-27 Update - clarified when Configuration is available in an API Controller&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term=".Net" scheme="http://codethug.com/categories/Net/"/>
    
      <category term="Web API" scheme="http://codethug.com/categories/Net/Web-API/"/>
    
    
  </entry>
  
  <entry>
    <title>Web API Deep Dive -  DTO Transformations and Automapper (Part 5 of 6)</title>
    <link href="http://codethug.com/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/"/>
    <id>http://codethug.com/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/</id>
    <published>2015-02-13T14:30:14.000Z</published>
    <updated>2021-03-17T03:54:50.031Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some <a href="http://www.asp.net/web-api" target="_blank" rel="noopener">great documentation</a> on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.</p><ul><li>Part 1 - <a href="/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6">Customizing auto-generated documentation</a></li><li>Part 2 - <a href="/2015/01/23/web-api-http-response-codes">HTTP Response Codes</a></li><li>Part 3 - <a href="/2015/01/30/web-api-exception-handling/">HTTP Error Codes from Exceptions</a></li><li>Part 4 - <a href="/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/">OData URL Query Options</a></li><li>Part 5 - DTO Transformations and Automapper (this article)</li><li>Part 6 - <a href="/2015/02/20/web-api-deep-dive-ef-rollbacks/">Testing with EF Rollbacks across HTTP</a></li></ul><h3 id="Data-Transfer-Objects"><a href="#Data-Transfer-Objects" class="headerlink" title="Data Transfer Objects"></a>Data Transfer Objects</h3><p>First, off what is this DTO thing?  A Data Transfer Object is an object structure that you use to transfer data across the wire.  Sometimes it will look exactly like your entity framework entities.  Sometimes it will be different.  </p><p>For example, suppose you have a database with Customers and Invoices, and your tables look like this:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Customer Table</span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line">CustomerId</span><br><span class="line">Name</span><br><span class="line">City</span><br><span class="line">Telephone</span><br><span class="line"></span><br><span class="line">Invoice Table</span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line">InvoiceId</span><br><span class="line">CustomerId</span><br><span class="line">Amount</span><br></pre></td></tr></table></figure><p>These are also what your Entity models look like, because entity models reflect the database structure.  </p><p>Now suppose that you want to provide an API endpoint that returns a list of customers in a particular city with the number of invoices for each customer.  </p><a id="more"></a><p>The data you want to return from your API looks like this:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CustomerDTO</span><br><span class="line"><span class="comment">-----------</span></span><br><span class="line">CustomerId</span><br><span class="line">Name</span><br><span class="line">Telephone</span><br><span class="line">InvoiceCount</span><br></pre></td></tr></table></figure><p>This is your DTO.  You can make out where the data comes from in your database, but there is no table structure in your database that has this exact collection of fields, and thus no entity model that looks exactly like this.  You will need to retrieve the data from your database and then map/transform it into this structure.</p><h3 id="Manual-Mapping"><a href="#Manual-Mapping" class="headerlink" title="Manual Mapping"></a>Manual Mapping</h3><p>How do you map your data?  You can do it manually.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the customers from the database</span></span><br><span class="line"><span class="keyword">var</span> customersFromCity = context.Customers</span><br><span class="line">    .Include(c =&gt; c.Invoices)</span><br><span class="line">    .Where(c =&gt; c.City == city);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Count the invoices for each customer</span></span><br><span class="line"><span class="keyword">var</span> customersWithInvoicesCounted = customersFromCity.Select(c =&gt;</span><br><span class="line">    <span class="keyword">new</span> CustomerDTO()</span><br><span class="line">    &#123;</span><br><span class="line">        CustomerId = c.CustomerId,</span><br><span class="line">        Name = c.Name</span><br><span class="line">        Telephone = c.Telephone</span><br><span class="line">        InvoiceCount = c.Invoices.Count()</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>This works.  But it will become tedious very quickly - you will be writing many, many lines of code that do nothing more than copy a property from an entity to  a DTO (and for POSTs/PUTs, you’ll do the same in reverse).</p><h3 id="Automapper"><a href="#Automapper" class="headerlink" title="Automapper"></a>Automapper</h3><p>Enter <a href="http://automapper.org/" target="_blank" rel="noopener">Automapper</a>.  It is designed specifically to relieve you of this tedium.  It involves two steps:</p><p>1. Setup Automappper.  This can be done once in a centralized location for your entire application.  Here is the basic mapping setup:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Customer is your Entities Customer class, and CustomerDTO is,</span></span><br><span class="line"><span class="comment">// well, your Customer DTO class</span></span><br><span class="line">Mapper.CreateMap&lt;Customer, CustomerDTO&gt;();</span><br></pre></td></tr></table></figure><p>Assuming that the property types and names on the two classes match, Automapper can figure out how to copy properties from one to the other.  However, we have one property that can’t be directly copied - the <code>InvoiceCount</code> property.  Thankfully, Automapper has a way to help us manually map properties.  We just extend the mapping definition a little:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mapper.CreateMap&lt;Customer, CustomerDTO&gt;()</span><br><span class="line">    .ForMember(dest =&gt; dest.InvoiceCount, opt =&gt;</span><br><span class="line">        opt.MapFrom(src =&gt; src.Invoices.Count()));</span><br></pre></td></tr></table></figure><p>With the <code>ForMember()</code> call, we’re telling Automapper that when it sees the <code>InvoiceCount</code> property on the DTO, it should populate the property by calling <code>Invoices.Count()</code> on the object it’s copying things from.  The rest of the properties are figured out automatically.</p><p>2. Use Automapper to perform the mappings.</p><p>To map a single item:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CustomerDTO customerWithInvoicesCounted = Mapper.Map&lt;CustomerDTO&gt;(customer);</span><br></pre></td></tr></table></figure><p>This is nice and simple - there is no need to manually map every single property.  However, it’s slightly different when you’re dealing with a collection of items.  If you have an <code>IQueryable</code> of customer entities, and you want to ‘preserve the <code>IQueryable</code>‘ if you will, Automapper can still help.  Continuing with our example above, where we want to find customers from a specified city and the number of invoices they each have, you can map the data like this:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the customers from the database</span></span><br><span class="line"><span class="keyword">var</span> customersFromCity = context.Customers</span><br><span class="line">    .Include(c =&gt; c.Invoices)</span><br><span class="line">    .Where(c =&gt; c.City == city);</span><br><span class="line"></span><br><span class="line">IQueryable&lt;CustomerDTO&gt; customersDTO =</span><br><span class="line">    customersFromCity.Project().To&lt;CustomerDTO&gt;();</span><br></pre></td></tr></table></figure><p>Notice what’s going on here - Automapper has just mapped your <code>IQueryable&lt;Customer&gt;</code> into an <code>IQueryable&lt;CustomerDTO&gt;</code> using the mapping instructions defined above.  You can then perform a query on this <code>IQueryable&lt;CustomerDTO&gt;</code>, and the query will be executed on your SQL server.  Furthermore, if <a href="/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6">OData URL Query options</a> are turned on, you can return this <code>IQueryable</code> from your Web API endpoint, and the javascript client can control mapping, filtering and paging in your database even though the javascript client can only see the structure of the DTOs.</p><p>There are some limitations on what can be projected in this way - see the ‘Supported Mapping options’ section at the bottom of <a href="https://github.com/AutoMapper/AutoMapper/wiki/Queryable-Extensions" target="_blank" rel="noopener">https://github.com/AutoMapper/AutoMapper/wiki/Queryable-Extensions</a> for details.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some &lt;a href=&quot;http://www.asp.net/web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;great documentation&lt;/a&gt; on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href=&quot;/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6&quot;&gt;Customizing auto-generated documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href=&quot;/2015/01/23/web-api-http-response-codes&quot;&gt;HTTP Response Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href=&quot;/2015/01/30/web-api-exception-handling/&quot;&gt;HTTP Error Codes from Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4 - &lt;a href=&quot;/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/&quot;&gt;OData URL Query Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5 - DTO Transformations and Automapper (this article)&lt;/li&gt;
&lt;li&gt;Part 6 - &lt;a href=&quot;/2015/02/20/web-api-deep-dive-ef-rollbacks/&quot;&gt;Testing with EF Rollbacks across HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Data-Transfer-Objects&quot;&gt;&lt;a href=&quot;#Data-Transfer-Objects&quot; class=&quot;headerlink&quot; title=&quot;Data Transfer Objects&quot;&gt;&lt;/a&gt;Data Transfer Objects&lt;/h3&gt;&lt;p&gt;First, off what is this DTO thing?  A Data Transfer Object is an object structure that you use to transfer data across the wire.  Sometimes it will look exactly like your entity framework entities.  Sometimes it will be different.  &lt;/p&gt;
&lt;p&gt;For example, suppose you have a database with Customers and Invoices, and your tables look like this:  &lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Customer Table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CustomerId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;City&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Telephone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invoice Table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;InvoiceId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CustomerId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Amount&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;These are also what your Entity models look like, because entity models reflect the database structure.  &lt;/p&gt;
&lt;p&gt;Now suppose that you want to provide an API endpoint that returns a list of customers in a particular city with the number of invoices for each customer.  &lt;/p&gt;
    
    </summary>
    
      <category term="Web API" scheme="http://codethug.com/categories/Web-API/"/>
    
    
  </entry>
  
  <entry>
    <title>Web API Deep Dive - OData URL Query Options (Part 4 of 6)</title>
    <link href="http://codethug.com/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/"/>
    <id>http://codethug.com/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/</id>
    <published>2015-02-06T14:30:15.000Z</published>
    <updated>2021-03-17T03:54:50.032Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some <a href="http://www.asp.net/web-api" target="_blank" rel="noopener">great documentation</a> on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.</p><ul><li>Part 1 - <a href="/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6">Customizing auto-generated documentation</a></li><li>Part 2 - <a href="/2015/01/23/web-api-http-response-codes/">HTTP Response Codes</a></li><li>Part 3 - <a href="/2015/01/30/web-api-exception-handling/">HTTP Error Codes from Exceptions</a></li><li>Part 4 - OData URL Query Options (this article)</li><li>Part 5 - <a href="/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/">DTO Transformations and Automapper</a></li><li>Part 6 - <a href="/2015/02/20/web-api-deep-dive-ef-rollbacks/">Testing with EF Rollbacks across HTTP</a></li></ul><h3 id="OData-URL-Query-Options"><a href="#OData-URL-Query-Options" class="headerlink" title="OData URL Query Options"></a>OData URL Query Options</h3><p>In your API, have you ever created a <code>GET /Orders</code> endpoint, then you discover you need to support paging, so you add an <code>GET /Orders?start={start}&amp;pageSize={pageSize}</code> endpoint?  Then you learn another endpoint is needed for sorting by Date, so you also create <code>GET /OrdersByDate</code> and GET <code>/OrdersByDate?start={start}&amp;pageSize={pageSize}</code> endpoints.  Before you know it, even though it feels like it should only be a single method, you end up with a collection of endpoints that all do pretty much the same thing except for basic sorting and filtering.</p><p>There is an easier way.</p><p>Turn on OData URL Query options.  To do this, open <code>App_Start\WebApiConfig.cs</code> and add this to the top of the Register method:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Allow OData Queries on all methods that return IQueryable</span></span><br><span class="line">System.Web.Http.OData.Extensions</span><br><span class="line">    .HttpConfigurationExtensions.AddODataQueryFilter(config);</span><br></pre></td></tr></table></figure><a id="more"></a><p>Next, return an IQueryable<orders> from your <code>GET /Orders</code> endpoint and consumers of your API can do paging, filtering, and sorting.  As long as the IQueryable comes all the way from your Entity Framework context, then the paging, filtering, and sorting is all done where it should be - in the database.</orders></p><p>For example, if someone only wanted to get the first 10 orders, they could call <code>/Orders?$top=10</code>.  The paging for <code>$top=10</code> is implemented automatically - you don’t have to implement anything other than returning an IQueryable and turning on OData URL Query Options as described just above.</p><p>For more documentation on the OData URL conventions, see <a href="http://docs.oasis-open.org/odata/odata/v4.0/os/part2-url-conventions/odata-v4.0-os-part2-url-conventions.html#_Toc372793790" target="_blank" rel="noopener">http://docs.oasis-open.org/odata/odata/v4.0/os/part2-url-conventions/odata-v4.0-os-part2-url-conventions.html#_Toc372793790</a>.  Please note that the technique described in this post does not implement a full OData service - it only uses the querystring structure of OData to allow for filtering, sorting, and paging.  A full OData web service can be provided by Web API, but that is beyond the scope of this series.</p><p>In the next post in the series, we’ll see how you can return a custom Data Transfer Object (DTO) from your API methods, where the DTO differs from your EF models, but without breaking the functionality provided by OData Query Filtering.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some &lt;a href=&quot;http://www.asp.net/web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;great documentation&lt;/a&gt; on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href=&quot;/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6&quot;&gt;Customizing auto-generated documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href=&quot;/2015/01/23/web-api-http-response-codes/&quot;&gt;HTTP Response Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - &lt;a href=&quot;/2015/01/30/web-api-exception-handling/&quot;&gt;HTTP Error Codes from Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4 - OData URL Query Options (this article)&lt;/li&gt;
&lt;li&gt;Part 5 - &lt;a href=&quot;/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/&quot;&gt;DTO Transformations and Automapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6 - &lt;a href=&quot;/2015/02/20/web-api-deep-dive-ef-rollbacks/&quot;&gt;Testing with EF Rollbacks across HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;OData-URL-Query-Options&quot;&gt;&lt;a href=&quot;#OData-URL-Query-Options&quot; class=&quot;headerlink&quot; title=&quot;OData URL Query Options&quot;&gt;&lt;/a&gt;OData URL Query Options&lt;/h3&gt;&lt;p&gt;In your API, have you ever created a &lt;code&gt;GET /Orders&lt;/code&gt; endpoint, then you discover you need to support paging, so you add an &lt;code&gt;GET /Orders?start={start}&amp;amp;pageSize={pageSize}&lt;/code&gt; endpoint?  Then you learn another endpoint is needed for sorting by Date, so you also create &lt;code&gt;GET /OrdersByDate&lt;/code&gt; and GET &lt;code&gt;/OrdersByDate?start={start}&amp;amp;pageSize={pageSize}&lt;/code&gt; endpoints.  Before you know it, even though it feels like it should only be a single method, you end up with a collection of endpoints that all do pretty much the same thing except for basic sorting and filtering.&lt;/p&gt;
&lt;p&gt;There is an easier way.&lt;/p&gt;
&lt;p&gt;Turn on OData URL Query options.  To do this, open &lt;code&gt;App_Start\WebApiConfig.cs&lt;/code&gt; and add this to the top of the Register method:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Allow OData Queries on all methods that return IQueryable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.Web.Http.OData.Extensions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .HttpConfigurationExtensions.AddODataQueryFilter(config);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web API" scheme="http://codethug.com/categories/Web-API/"/>
    
    
  </entry>
  
  <entry>
    <title>Web API Deep Dive - HTTP Error Codes from Exceptions (Part 3 of 6)</title>
    <link href="http://codethug.com/2015/01/30/web-api-exception-handling/"/>
    <id>http://codethug.com/2015/01/30/web-api-exception-handling/</id>
    <published>2015-01-30T14:30:18.000Z</published>
    <updated>2021-03-17T03:54:50.033Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some <a href="http://www.asp.net/web-api" target="_blank" rel="noopener">great documentation</a> on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.</p><ul><li>Part 1 - <a href="/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6/">Customizing auto-generated documentation</a></li><li>Part 2 - <a href="/2015/01/23/web-api-http-response-codes">HTTP Response Codes</a></li><li>Part 3 - HTTP Error Codes from Exceptions (this article)</li><li>Part 4 - <a href="/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/">OData URL Query Options</a></li><li>Part 5 - <a href="/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/">DTO Transformations and Automapper</a></li><li>Part 6 - <a href="/2015/02/20/web-api-deep-dive-ef-rollbacks/">Testing with EF Rollbacks across HTTP</a></li></ul><h3 id="HTTP-Error-Codes-from-Exceptions"><a href="#HTTP-Error-Codes-from-Exceptions" class="headerlink" title="HTTP Error Codes from Exceptions"></a>HTTP Error Codes from Exceptions</h3><p>In <a href="/2015/01/23/web-api-http-response-codes">the last post</a>, we looked at how you can specify HTTP Response codes to return from your API controller when everything is working properly.  However, sometimes a problem will occur deep inside your code.  Continuing down the REST path, when problems occur, you should use the semantics of HTTP by returning an HTTP status code that reflects the error.  When problems occur in your code, exceptions are typically thrown.  This week we will be looking at how we can specify the HTTP Response code and content to return depending on the exception that is thrown.</p><p><em>Feb 10, 2016 Update - Fixed bug in second code block</em></p><p>This is a matter of style, but the first thing that I like to do is to create a custom exception, so that I know that what I’m doing will only apply when I specifically raise my custom exception.</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderTotalWrongException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderTotalWrongException</span>(<span class="params"><span class="keyword">int</span> orderId, <span class="keyword">decimal</span> totalOrderAmount,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.OrderId = orderId;</span><br><span class="line"><span class="keyword">this</span>.TotalOrderAmount = totalOrderAmount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> OrderId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">decimal</span> TotalOrderAmount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, create an ExceptionFilterAttribute.  An ExceptionFilterAttribute allows you to handle a exception that is not handled by a controller action.  Please note that this attribute can be used with multiple exception types you want to use by adding an ‘<code>else</code>‘ statement after the first ‘<code>if</code>‘ statement.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderingExceptionResponseAttribute</span> : <span class="title">ExceptionFilterAttribute</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">HttpActionExecutedContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (context.Exception <span class="keyword">is</span> OrderTotalWrongException)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> response= <span class="keyword">new</span> HttpResponseMessage(HttpStatusCode.Conflict);</span><br><span class="line">response.ReasonPhrase = <span class="string">"Problem with Order Total"</span>;</span><br><span class="line"><span class="keyword">var</span> e = (OrderTotalWrongException) context.Exception;</span><br><span class="line">response.Content = <span class="keyword">new</span> StringContent(</span><br><span class="line">                <span class="string">"Problem found with order "</span> + e.OrderId +</span><br><span class="line"><span class="string">".  It showed up with a total of "</span> + TotalOrderAmount);</span><br><span class="line">context.Response = response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s dig into this code.  We’re creating an Exception Filter.  This is an attribute that, when applied to a controller or action method, will give this code a chance to handle unexpected exceptions.</p><p>We only care about the specific custom exception I created earlier.  When it is thrown, we create a <code>HttpResponseMessage</code> - this is the response that will be sent to the client that called our API.  Our normal controller and action method can’t help us, because they weren’t able to handle this exception, so it’s up to us to construct a meaningful response.  We set the HTTP Status Code - in this case we’re using HTTP 409, Conflict, because there is a conflict with the total amount of the order.  <a href="http://httpstatus.es/" target="_blank" rel="noopener">http://httpstatus.es</a> has a helpful listing of the available HTTP status codes.  I then add some textual description of the error that is built from the properties on the custom Exception type we created earlier, and we set the response on the context object so that the <code>HttpResponseMessage</code> we created will be returned to the client.</p><p>Now you have created the attribute that can be added to any controller or action method.  Next, you can either manually add it to the controllers you want to add it to, or you can add it to all controllers, all actions, by opening up App_Start\WebApiConfig.cs and adding this line:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.Filters.Add(<span class="keyword">new</span> OrderingExceptionResponseAttribute ());</span><br></pre></td></tr></table></figure><p>You have now wired up a global exception handler that will kick in and provide a specific HTTP response when an action is called, the custom exception is thrown, and you don’t handle the exception in the action.  The nice part about this is that your actions and anything that your actions call don’t need to know that this is in place.  All they have to do is throw your custom exception.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPut, Route(<span class="meta-string">"Order/&#123;orderId&#125;"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IHttpActionResult <span class="title">UpdateOrder</span>(<span class="params"><span class="keyword">int</span> orderId, UpdateOrderVM updateOrder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!orders.OrderExists(orderId))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NotFoundResult(Request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The UpdateOrder method has logic that</span></span><br><span class="line"><span class="comment">// might throw OrderTotalWrongException</span></span><br><span class="line">orders.UpdateOrder(updateOrder);</span><br><span class="line"><span class="keyword">return</span> Ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>References:<br><a href="http://www.asp.net/web-api/overview/web-api-routing-and-actions/exception-handling" target="_blank" rel="noopener">http://www.asp.net/web-api/overview/web-api-routing-and-actions/exception-handling</a><br><a href="http://stackoverflow.com/questions/15167927/how-do-i-log-all-exceptions-globally-for-a-c-sharp-mvc4-webapi-app" target="_blank" rel="noopener">http://stackoverflow.com/questions/15167927/how-do-i-log-all-exceptions-globally-for-a-c-sharp-mvc4-webapi-app</a><br><a href="http://www.apress.com/9781430259800" target="_blank" rel="noopener">http://www.apress.com/9781430259800</a><br><a href="https://github.com/filipw/apress-recipes-webapi/tree/master/Chapter%2007/7-1" target="_blank" rel="noopener">https://github.com/filipw/apress-recipes-webapi/tree/master/Chapter%2007/7-1</a><br><a href="http://www.asp.net/web-api/overview/web-api-routing-and-actions/exception-handling" target="_blank" rel="noopener">http://www.asp.net/web-api/overview/web-api-routing-and-actions/exception-handling</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some &lt;a href=&quot;http://www.asp.net/web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;great documentation&lt;/a&gt; on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1 - &lt;a href=&quot;/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6/&quot;&gt;Customizing auto-generated documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2 - &lt;a href=&quot;/2015/01/23/web-api-http-response-codes&quot;&gt;HTTP Response Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3 - HTTP Error Codes from Exceptions (this article)&lt;/li&gt;
&lt;li&gt;Part 4 - &lt;a href=&quot;/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/&quot;&gt;OData URL Query Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5 - &lt;a href=&quot;/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/&quot;&gt;DTO Transformations and Automapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6 - &lt;a href=&quot;/2015/02/20/web-api-deep-dive-ef-rollbacks/&quot;&gt;Testing with EF Rollbacks across HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HTTP-Error-Codes-from-Exceptions&quot;&gt;&lt;a href=&quot;#HTTP-Error-Codes-from-Exceptions&quot; class=&quot;headerlink&quot; title=&quot;HTTP Error Codes from Exceptions&quot;&gt;&lt;/a&gt;HTTP Error Codes from Exceptions&lt;/h3&gt;&lt;p&gt;In &lt;a href=&quot;/2015/01/23/web-api-http-response-codes&quot;&gt;the last post&lt;/a&gt;, we looked at how you can specify HTTP Response codes to return from your API controller when everything is working properly.  However, sometimes a problem will occur deep inside your code.  Continuing down the REST path, when problems occur, you should use the semantics of HTTP by returning an HTTP status code that reflects the error.  When problems occur in your code, exceptions are typically thrown.  This week we will be looking at how we can specify the HTTP Response code and content to return depending on the exception that is thrown.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Feb 10, 2016 Update - Fixed bug in second code block&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a matter of style, but the first thing that I like to do is to create a custom exception, so that I know that what I’m doing will only apply when I specifically raise my custom exception.&lt;/p&gt;
    
    </summary>
    
      <category term="Web API" scheme="http://codethug.com/categories/Web-API/"/>
    
    
  </entry>
  
  <entry>
    <title>Web API Deep Dive – HTTP Response Codes (Part 2 of 6)</title>
    <link href="http://codethug.com/2015/01/23/web-api-http-response-codes/"/>
    <id>http://codethug.com/2015/01/23/web-api-http-response-codes/</id>
    <published>2015-01-23T14:30:27.000Z</published>
    <updated>2021-03-17T03:54:50.033Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some <a href="http://www.asp.net/web-api" target="_blank" rel="noopener">great documentation</a> on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.</p><p>   Part 1 - <a href="/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6/">Customizing auto-generated documentation</a><br>   Part 2 - HTTP Response Codes (this article)<br>   Part 3 - <a href="/2015/01/30/web-api-exception-handling/">HTTP Error Codes from Exceptions</a><br>   Part 4 - <a href="/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/">OData URL Query Options</a><br>   Part 5 - <a href="/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/">DTO Transformations and Automapper</a><br>   Part 6 - <a href="/2015/02/20/web-api-deep-dive-ef-rollbacks/">Testing with EF Rollbacks across HTTP</a></p><h3 id="Using-Appropriate-HTTP-Response-Codes"><a href="#Using-Appropriate-HTTP-Response-Codes" class="headerlink" title="Using Appropriate HTTP Response Codes"></a>Using Appropriate HTTP Response Codes</h3><p>When building an HTTP REST API, you should use appropriate <a href="http://httpstatus.es/" target="_blank" rel="noopener">HTTP response codes</a> to indicate the status of a response.  This uses the semantics of HTTP to communicate the status rather than inventing something new.  Here are the three response codes I use most often:</p><p>   HTTP 200 - Everything is OK<br>   HTTP 201 - Something was created<br>   HTTP 404 - Something could not be found</p><p>I only explicitly do this for methods that return a single object.  For Web API methods that return a collection, I don’t worry about what’s written in this blog post.  That’s because if I successfully return a collection, Web API will by default return HTTP 200 OK.  If it can’t find any items, I return an empty collection, which still by default returns HTTP 200 OK.  And if there is an error, the error handling filter returns the appropriate HTTP Status code for the error (more details on this in next week’s post).</p><a id="more"></a><p>To return the appropriate HTTP response codes, there are 3 steps:</p><ol><li>Change the return type of your Web API action to <code>IHttpActionResult</code>.</li><li><p>Wrap your return value in one of the helper methods, such as Ok()</p><p>After following these steps, you might notice that the auto-generated documentation (see <a href="/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6/">part 1</a> of this series) can no longer figure out the type of the data being returned by your API method.  Thankfully, there is a helpful attribute to give the documentation generator a hint: <code>ResponseType</code>.  Add this attribute to your method and your Documentation should pick up the response type for the method.  Note that you can include this attribute multiple times with different types listed, which can be helpful if a single API method has several possible return types.</p></li><li><p>Add <code>ResponseType</code> attribute to the API Method</p></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ResponseType(typeof(Order))</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IHttpActionResult <span class="title">GetOrder</span>(<span class="params"><span class="keyword">int</span> orderId</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> order = orderFinder.FindOrder(orderId);  </span><br><span class="line"><span class="keyword">if</span> (order == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> NotFoundResult(Request);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Ok(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In addition to <code>Ok()</code>, there are other methods including <code>BadRequest()</code>, <code>NotFoundResult()</code>, <code>Created()</code>, and more.  If you can’t find the HTTP Status code that you want to use, you can use the generic one, which allows you to use any of the 48 codes in the <a href="http://msdn.microsoft.com/en-us/library/system.net.httpstatuscode%28v=vs.110%29.aspx" target="_blank" rel="noopener">System.Net.HttpStatusCode</a> enum.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StatusCodeResult(HttpStatusCode.Moved, Request);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Microsoft’s ASP.Net Web API 2.2 allows you to easily create REST style APIs on an IIS website.  Microsoft has some &lt;a href=&quot;http://www.asp.net/web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;great documentation&lt;/a&gt; on how to get started with it, so I won’t rehash that here.  Instead, I’m going to go a little deeper into some powerful features that can be used with Web API.&lt;/p&gt;
&lt;p&gt;   Part 1 - &lt;a href=&quot;/2015/01/16/web-api-deep-dive-customizing-auto-generated-documentation-part-1-of-6/&quot;&gt;Customizing auto-generated documentation&lt;/a&gt;&lt;br&gt;   Part 2 - HTTP Response Codes (this article)&lt;br&gt;   Part 3 - &lt;a href=&quot;/2015/01/30/web-api-exception-handling/&quot;&gt;HTTP Error Codes from Exceptions&lt;/a&gt;&lt;br&gt;   Part 4 - &lt;a href=&quot;/2015/02/06/web-api-deep-dive-odata-url-query-options-part-4-of-6/&quot;&gt;OData URL Query Options&lt;/a&gt;&lt;br&gt;   Part 5 - &lt;a href=&quot;/2015/02/13/web-api-deep-dive-dto-transformations-and-automapper-part-5-of-6/&quot;&gt;DTO Transformations and Automapper&lt;/a&gt;&lt;br&gt;   Part 6 - &lt;a href=&quot;/2015/02/20/web-api-deep-dive-ef-rollbacks/&quot;&gt;Testing with EF Rollbacks across HTTP&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Using-Appropriate-HTTP-Response-Codes&quot;&gt;&lt;a href=&quot;#Using-Appropriate-HTTP-Response-Codes&quot; class=&quot;headerlink&quot; title=&quot;Using Appropriate HTTP Response Codes&quot;&gt;&lt;/a&gt;Using Appropriate HTTP Response Codes&lt;/h3&gt;&lt;p&gt;When building an HTTP REST API, you should use appropriate &lt;a href=&quot;http://httpstatus.es/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP response codes&lt;/a&gt; to indicate the status of a response.  This uses the semantics of HTTP to communicate the status rather than inventing something new.  Here are the three response codes I use most often:&lt;/p&gt;
&lt;p&gt;   HTTP 200 - Everything is OK&lt;br&gt;   HTTP 201 - Something was created&lt;br&gt;   HTTP 404 - Something could not be found&lt;/p&gt;
&lt;p&gt;I only explicitly do this for methods that return a single object.  For Web API methods that return a collection, I don’t worry about what’s written in this blog post.  That’s because if I successfully return a collection, Web API will by default return HTTP 200 OK.  If it can’t find any items, I return an empty collection, which still by default returns HTTP 200 OK.  And if there is an error, the error handling filter returns the appropriate HTTP Status code for the error (more details on this in next week’s post).&lt;/p&gt;
    
    </summary>
    
      <category term="Web API" scheme="http://codethug.com/categories/Web-API/"/>
    
    
  </entry>
  
</feed>
